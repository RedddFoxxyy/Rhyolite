name: 'publish'
on:
  push:
    branches:
      - master
jobs:
  publish-tauri:
    permissions: 
      contents: write
      issues: write
      pull-requests: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # Existing platforms
          - platform: 'macos-latest'  # for Arm based macs (M1 and above)
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'  # for Intel based macs
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''  # Default x86_64
          
          # New Ubuntu cross-compilation targets
          - platform: 'ubuntu-22.04'
            args: '--target i686-unknown-linux-gnu'  # 32-bit x86
          - platform: 'ubuntu-22.04'
            args: '--target aarch64-unknown-linux-gnu'  # ARM64
          - platform: 'ubuntu-22.04'
            args: '--target armv7-unknown-linux-gnueabihf'  # ARMv7 hard float
          - platform: 'ubuntu-22.04'
            args: '--target riscv64gc-unknown-linux-gnu'  # RISC-V 64-bit
          
          # Windows targets (existing)
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
          - platform: 'windows-latest'
            args: '--target i686-pc-windows-msvc'
          - platform: 'windows-latest'
            args: '--target aarch64-pc-windows-msvc'
    
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      
      - name: install Rust stable with cross-compilation targets
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: >
            ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' ||
            matrix.platform == 'windows-latest' && 'x86_64-pc-windows-msvc,i686-pc-windows-msvc,aarch64-pc-windows-msvc' ||
            matrix.platform == 'ubuntu-22.04' && 'x86_64-unknown-linux-gnu,i686-unknown-linux-gnu,aarch64-unknown-linux-gnu,armv7-unknown-linux-gnueabihf,riscv64gc-unknown-linux-gnu' || '' }}
      
            - name: install cross-compilation dependencies (ubuntu only)
            if: matrix.platform == 'ubuntu-22.04'
            run: |
              # Use the official Ubuntu mirrors
              sudo sed -i 's/security.ubuntu.com/archive.ubuntu.com/g' /etc/apt/sources.list
              
              # Add multi-arch support
              sudo dpkg --add-architecture i386
              sudo dpkg --add-architecture armhf
              sudo dpkg --add-architecture arm64
              
              sudo apt-get update
              
              # Install base and cross-compilation dependencies
              sudo apt-get install -y \
                libwebkit2gtk-4.1-dev \
                libappindicator3-dev \
                librsvg2-dev \
                patchelf \
                gcc-multilib \
                g++-multilib \
                pkg-config \
                crossbuild-essential-arm64 \
                crossbuild-essential-armhf
          
              # Install cross-compilation toolchains and libraries
              sudo apt-get install -y \
                gcc-aarch64-linux-gnu \
                g++-aarch64-linux-gnu \
                libglib2.0-dev:arm64 \
                libgtk-3-dev:arm64 \
                libwebkit2gtk-4.1-dev:arm64
          
            # Set up pkg-config for cross-compilation
            - name: Configure pkg-config for cross-compilation
              if: matrix.platform == 'ubuntu-22.04'
              env:
                TARGET: ${{ matrix.args == '--target aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu' || '' }}
              run: |
                if [ -n "$TARGET" ]; then
                  # Set up pkg-config paths for cross-compilation
                  echo "PKG_CONFIG_PATH=/usr/lib/${TARGET}/pkgconfig" >> $GITHUB_ENV
                  echo "PKG_CONFIG_SYSROOT_DIR=/usr/${TARGET}" >> $GITHUB_ENV
                  echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=${TARGET}-gcc" >> $GITHUB_ENV
                fi
          
      - name: install frontend dependencies
        run: npm install
      
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Add cross-compilation environment variables
          PKG_CONFIG_ALLOW_CROSS: 1
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
          PKG_CONFIG_SYSROOT_DIR: ${{ env.PKG_CONFIG_SYSROOT_DIR }}
        with:
          tagName: v__VERSION__
          releaseName: 'Rhyolite(v__VERSION__)'
          releaseBody: 'Draft Release'
          releaseDraft: true
          prerelease: true
          args: ${{ matrix.args }}
